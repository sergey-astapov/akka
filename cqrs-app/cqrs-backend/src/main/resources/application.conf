BackendSys {
  akka {
    loglevel = "INFO"
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    log-config-on-start = off
    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }
    remote {
      enabled-transports = ["akka.remote.netty.tcp"]
      netty.tcp {
        hostname = "0.0.0.0"
        port = 5150
      }
    }
  }

  #--------------MONITORING----------------
  #  docker run command: docker run -d -p 80:80 -p 8125:8125/udp -p 8126:8126 --name kamon-grafana-dashboard kamon/grafana_graphite
  #  VM arg: docker run -d -p 80:80 -p 8125:8125/udp -p 8126:8126 --name kamon-grafana-dashboard kamon/grafana_graphite
  #  Kamon Dashboad set $Application: * $Host: *
  #----------------------------------------
  akka {
    #extensions = ["kamon.metric.Metrics", "kamon.statsd.StatsD", "kamon.system.SystemMetrics", "kamon.logreporter.LogReporter"]
    extensions = ["kamon.metric.Metrics", "kamon.statsd.StatsD", "kamon.system.SystemMetrics"]
  }
  kamon {
    log-reporter {
      report-system-metrics = false
    }
    metrics {
      filters = [
        {
          actor {
            includes = [ "user/*", "user/worker-*" ]
            excludes = [ "system/*" ]
          }
        },
        {
          trace {
            includes = [ "*" ]
            excludes = []
          }
        }
      ]
    }
    statsd {
      # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
      # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
      hostname = "192.168.59.104"
      port = 8125

      # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
      # kamon.metrics.tick-interval setting.
      flush-interval = 1 second

      # Max packet size for UDP metrics data sent to StatsD.
      max-packet-size = 1024 bytes

      # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
      # collection for your desired entities must be activated under the kamon.metrics.filters settings.
      includes {
        actor       = [ "*" ]
        trace       = [ "*" ]
        dispatcher  = [ "*" ]
      }

      simple-metric-key-generator {
        # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
        # this pattern:
        #    application.host.entity.entity-name.metric-name
        application = "cqrs-backend"
      }
    }
  }
}